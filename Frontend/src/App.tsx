import React, { useState, useEffect } from 'react';
import Navigation from './components/Navigation';
import LoginSignup from './components/LoginSignup';
import Onboarding from './components/Onboarding';
import InterviewSetup from './components/InterviewSetup';
import InterviewFlow from './components/InterviewFlow';
import Dashboard from './components/Dashboard';
import { User, InterviewType, Answer, InterviewResult, SkillScore, Question } from './types';
import { mockSkillScores, mockPeerComparison } from './data/mockData';
import { calculateSkillScore, generateFeedback, calculatePercentile } from './utils/scoring';

type AppStep = 'login' | 'onboarding' | 'setup' | 'interview' | 'results';

const API_BASE = (import.meta as any).env.VITE_API_BASE || 'http://localhost:8000';

function App() {
  const [currentStep, setCurrentStep] = useState<AppStep>('login');
  const [user, setUser] = useState<User | null>(null);
  const [selectedInterviewType, setSelectedInterviewType] = useState<InterviewType | null>(null);
  const [interviewResult, setInterviewResult] = useState<InterviewResult | null>(null);
  const [jobDescription, setJobDescription] = useState<string | undefined>(undefined);
  const [isLoading, setIsLoading] = useState(true);
  const [interviewQuestions, setInterviewQuestions] = useState<Question[]>([]);

  useEffect(() => {
    const checkAuthStatus = async () => {
      const token = localStorage.getItem('access_token');
      if (token) {
        try {
          const response = await fetch(`${API_BASE}/auth/me`, {
            headers: { 'Authorization': `Bearer ${token}` }
          });
          if (response.ok) {
            const userData = await response.json();
            handleLoginSuccess(userData);
          } else {
            handleLogout();
          }
        } catch (error) {
          console.error("Failed to verify auth status", error);
          handleLogout();
        }
      }
      setIsLoading(false);
    };
    checkAuthStatus();
  }, []);

  const handleLoginSuccess = (userData: User) => {
    setUser(userData);
    if (!userData.experience || !userData.currentRole || !userData.region) {
      setCurrentStep('onboarding');
    } else {
      setCurrentStep('setup');
    }
  };

  const handleOnboardingComplete = async (updatedUserData: User) => {
    const token = localStorage.getItem('access_token');
    if (!token) {
      setCurrentStep('login');
      return;
    }
    try {
      const response = await fetch(`${API_BASE}/auth/me`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(updatedUserData),
      });
      if (!response.ok) throw new Error('Failed to update user profile.');
      
      const updatedUser = await response.json();
      setUser(updatedUser);
      setCurrentStep('setup');
    } catch (error) {
      console.error("Onboarding completion failed:", error);
    }
  };

  const handleUpdateUser = (updatedUser: User) => {
    setUser(updatedUser);
  };

  const handleInterviewStart = (interviewType: InterviewType, questions: Question[], jd?: string) => {
    // Persist questions so InterviewFlow can read them directly
    try {
      sessionStorage.setItem('pmbot_questions', JSON.stringify(questions));
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (window as any).__PMBOT_QUESTIONS = questions;
    } catch { /* ignore */ }

    setSelectedInterviewType(interviewType);
    setInterviewQuestions(questions);   // still used for scoring on complete
    setJobDescription(jd);
    setCurrentStep('interview');
  };

  const handleInterviewComplete = (answers: Answer[]) => {
    if (!selectedInterviewType) return;
    const skillScores: SkillScore[] = selectedInterviewType.skills.map(skill => {
      const score = calculateSkillScore(answers, interviewQuestions, skill);
      return {
        skill, score, maxScore: 100,
        percentile: calculatePercentile(score, skill),
        feedback: generateFeedback(score, skill),
        trend: 'stable',
        industryAverage: Math.floor(Math.random() * 15) + 70
      };
    });
    const overallScore = skillScores.reduce((acc, s) => acc + s.score, 0) / skillScores.length;
    const result: InterviewResult = {
      sessionId: new Date().toISOString(),
      overallScore: Math.round(overallScore),
      skillScores,
      strengths: mockSkillScores.filter(s => s.score > 85).map(s => s.skill),
      improvements: mockSkillScores.filter(s => s.score < 75).map(s => s.skill),
      peerComparison: mockPeerComparison,
      detailedFeedback: 'Detailed feedback would be generated by an AI model here.'
    };
    setInterviewResult(result);
    setCurrentStep('results');
  };

  const handleRetakeInterview = () => {
    setCurrentStep('setup');
  };

  const handleNavigate = (step: string) => {
    setCurrentStep(step as AppStep);
  };
  
  const handleLogout = () => {
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    setUser(null);
    setCurrentStep('login');
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-orange-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-lg text-gray-600">Loading your session...</p>
        </div>
      </div>
    );
  }
  
  const renderStep = () => {
    switch(currentStep) {
      case 'login':
        return <LoginSignup onComplete={handleLoginSuccess} />;
      case 'onboarding':
        return user ? <Onboarding user={user} onComplete={handleOnboardingComplete} /> : <LoginSignup onComplete={handleLoginSuccess} />;
      case 'setup':
        return user ? <InterviewSetup user={user} onStartInterview={handleInterviewStart} /> : <LoginSignup onComplete={handleLoginSuccess} />;
      case 'interview':
        return selectedInterviewType && user ? (
          <InterviewFlow 
            interviewType={selectedInterviewType}
            onComplete={handleInterviewComplete}
            jobDescription={jobDescription} 
          />
        ) : <InterviewSetup user={user!} onStartInterview={handleInterviewStart} />;
      case 'results':
        return interviewResult && user ? <Dashboard result={interviewResult} onRetakeInterview={handleRetakeInterview} /> : <InterviewSetup user={user!} onStartInterview={handleInterviewStart} />;
      default:
        return <LoginSignup onComplete={handleLoginSuccess} />;
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {currentStep !== 'login' && user && (
        <Navigation
          currentStep={currentStep}
          onNavigate={handleNavigate}
          user={user}
          onUpdateUser={handleUpdateUser}
          onLogout={handleLogout}
        />
      )}
      {renderStep()}
    </div>
  );
}

export default App;
